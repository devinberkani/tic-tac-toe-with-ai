type: edu
custom_name: stage4
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/CellOccupiedException.java
  visible: true
  text: |
    package tictactoe;

    public class CellOccupiedException extends Exception {

        public CellOccupiedException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/tictactoe/GameBoard.java
  visible: true
  text: |
    package tictactoe;

    import java.util.InputMismatchException;
    import java.util.Random;
    import java.util.Scanner;

    public class GameBoard {
        private final static Scanner input = new Scanner(System.in);
        private boolean isGameOver = false;

        Player player1;
        Player player2;

        Player currentPlayer;
        private String[][] gameBoard = new String[3][3];

        private String[][] testGameBoard = new String[3][3];
        private int[] validUserCoordinates = new int[2];
        private final String[] gamePieceChoices = {"X", "O"};
        private int gamePieceCount;

        public GameBoard(Player player1, Player player2) {
            this.player1 = player1;
            this.player2 = player2;
            initializeGameBoard();
            printGameBoard();
        }

        // ***** GAME BOARD *****

        protected void initializeGameBoard() {

            for (int i = 0; i < getGameBoard().length; i++) {
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    getTestGameBoard()[i][j] = " ";
                }
            }

            setGameBoard(getTestGameBoard());
        }

        protected void printGameBoard() {

            // print top row
            String topBottomBorder = "---------";
            System.out.println(topBottomBorder);

            // print game board
            for (int i = 0; i < getGameBoard().length; i++) {
                // print left border character
                String leftRightBorderCharacter = "|";
                System.out.print(leftRightBorderCharacter + " ");
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    System.out.print(getGameBoard()[i][j] + " ");
                }
                // print right border character
                System.out.println(leftRightBorderCharacter);
            }

            // print bottom row
            System.out.println(topBottomBorder);

            // update number of game pieces on game board
            updateNumberOfPiecesOnBoard();

            // update current player
            chooseCurrentPlayer();

        }

        private String[][] cloneGameBoard() {

            String[][] newGameBoard = new String[3][3];

            for (int i = 0; i < getGameBoard().length; i++) {
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    newGameBoard[i][j] = getGameBoard()[i][j];
                }
            }

            return newGameBoard;
        }

        // ***** SWITCH GAME PIECE ON EVERY TURN *****

        private void chooseCurrentPlayer() {

            // if there are an even number of game pieces already on the board, the current player is player 1, otherwise it's player 2

            if (getGamePieceCount() % 2 == 0) {
                setCurrentPlayer(getPlayer1());
            } else {
                setCurrentPlayer(getPlayer2());
            }
        }

        // keeps track of the number of pieces currently on the game board
        private void updateNumberOfPiecesOnBoard() {
            int gamePieceCount = 0;

            for (int i = 0; i < getGameBoard().length; i++) {
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    for (String gamePiece : getGamePieceChoices()) {
                        if (getGameBoard()[i][j].equals(gamePiece)) {
                            gamePieceCount++;
                        }
                    }
                }
            }

            setGamePieceCount(gamePieceCount);
        }

        // ***** COMPUTER AI LOGIC *****

        protected void getComputerCoordinates() { // add level parameter here

            boolean computerCoordinatesValid = false;

            System.out.println("Making move level \"easy\""); // levels will need to be turned into an array and called based on user selection

            while(!computerCoordinatesValid) {

                Random random = new Random();

                int computerCoordinate1 = random.nextInt(3);
                int computerCoordinate2 = random.nextInt(3);

                // validate user coordinates

                computerCoordinatesValid = isValidInput(computerCoordinate1, computerCoordinate2);

            }

        }

        // ***** GET USER COORDINATES *****

        protected void getUserCoordinates() {

            boolean userCoordinatesValid = false;

            while(!userCoordinatesValid) {

                System.out.print("Enter the coordinates: ");

                // empty coordinates in order to use validate input method
                int userCoordinate1 = 0;
                int userCoordinate2 = 0;

                // validate user coordinates

                userCoordinatesValid = isValidInput(userCoordinate1, userCoordinate2);

            }

        }

        // ***** VALIDATE COORDINATES AND ADD THEM TO GAME BOARD *****
        private boolean isValidInput(int coordinate1, int coordinate2) {

            boolean playerIsHuman = getCurrentPlayer().getType().equalsIgnoreCase("user");

            try {

                if (playerIsHuman) {
                    coordinate1 = input.nextInt() - 1;
                    coordinate2 = input.nextInt() - 1;
                }

                int[] testCoordinates = {coordinate1, coordinate2};

                setValidUserCoordinates(testCoordinates);

                setTestGameBoard(checkForGamePieceInCoordinateLocation(getValidUserCoordinates()));

                String coordinate = getGameBoard()[getValidUserCoordinates()[0]][getValidUserCoordinates()[1]];

                if (coordinate.equals(getGamePieceChoices()[0]) || coordinate.equals(getGamePieceChoices()[1])) {
                    throw new CellOccupiedException("This cell is occupied! Choose another one!");
                } else {
                    setGameBoard(getTestGameBoard());
                    return true;
                }

            } catch (CellOccupiedException cellOccupiedException) {
                if (playerIsHuman) {
                    System.out.println(cellOccupiedException.getMessage());
                }
            // check that coordinates are numbers
            } catch (InputMismatchException inputMismatchException) {
                if (playerIsHuman) {
                    System.out.println("You should enter numbers!");
                    input.nextLine(); // consume input
                }
            // check that coordinates are within correct range
            } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
                if (playerIsHuman) {
                    System.out.println("Coordinates should be from 1 to 3!");
                }
            }
            return false;
        }

        private String[][] checkForGamePieceInCoordinateLocation(int[] validUserCoordinates) {

            setTestGameBoard(cloneGameBoard());

            getTestGameBoard()[validUserCoordinates[0]][validUserCoordinates[1]] = getCurrentPlayer().getGamePiece();

            return getTestGameBoard();

        }

        // ***** GET AND TEST USER CELLS AND ADD THEM TO GAME BOARD *****

        protected void getUserCells() {

            System.out.print("Enter the cells: ");

            // get all cells and split them into an array
            String[] userCells = input.nextLine().split("");

            // add to the game board
            setGameBoard(translateUserInput(userCells));

            // print game board
            printGameBoard();
        }

        // translate the user input String into the test game board array
        private String[][] translateUserInput(String[] userInput) {

            // add user input to test game board

            int index = 0;
            for (int i = 0; i < getTestGameBoard().length; i++) {
                for (int j = 0; j < getTestGameBoard()[i].length; j++) {
                    // if one of the cells is "_" it should be printed as an empty space
                    if (userInput[index].equals("_")) {
                        getTestGameBoard()[i][j] = " ";
                    } else {
                        getTestGameBoard()[i][j] = userInput[index];
                    }
                    index++;
                }
            }

            return getTestGameBoard();
        }

        // ***** DEFINE WINS AND CHECK FOR WINNER *****
        protected boolean checkForWinner() {

            printGameBoard(); // keeps game board in correct order for tests

            boolean gameWon = false;
            String winner;

            for (String gamePieceCheck : getGamePieceChoices()) {
                for (int i = 0; i < getGameBoard().length; i++) {

                    // IF 2/3 OF THESE SCENARIOS ARE TRUE, COMPUTER SHOULD BLOCK WITH NEXT MOVE ON MEDIUM LEVEL, OR TAKE THE WIN IF IN ITS FAVOR

                    String gamePiece1 = "";
                    String gamePiece2 = "";
                    String gamePiece3 = "";

                    for (int j = 0; j < getGameBoard()[i].length; j++) {

                        // check for left to right diagonal winner
                        if (i == 0 && j == 0) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i + 1][j + 1];
                            gamePiece3 = getGameBoard()[i + 2][j + 2];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }

                        // check for right to left diagonal winner
                        if (i == 0 && j == 2) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i + 1][j - 1];
                            gamePiece3 = getGameBoard()[i + 2][j - 2];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }

                        // check for horizontal winner
                        if (j == 0) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i][j + 1];
                            gamePiece3 = getGameBoard()[i][j + 2];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }

                        // check for vertical winner
                        if (i == 0) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i + 1][j];
                            gamePiece3 = getGameBoard()[i + 2][j];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }
                    }

                    // break loop if game won
                    gameWon = isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3);
                    if (gameWon) {
                        winner = gamePieceCheck;
                        System.out.println(winner + " wins");
                        return true;
                    }
                }
            }

            if (getGamePieceCount() == 9) {
                System.out.println("Draw");
                return true;
            } else {
    //            System.out.println("Game not finished");
                return false;
            }
        }

        private boolean isWinner(String gamePieceCheck, String gamePiece1, String gamePiece2, String gamePiece3) {

            return gamePieceCheck.equals(gamePiece1) && gamePieceCheck.equals(gamePiece2) && gamePieceCheck.equals(gamePiece3);

        }

        // ***** GETTERS AND SETTERS *****


        public Player getPlayer1() {
            return player1;
        }

        public void setPlayer1(Player player1) {
            this.player1 = player1;
        }

        public Player getPlayer2() {
            return player2;
        }

        public void setPlayer2(Player player2) {
            this.player2 = player2;
        }

        public String[][] getGameBoard() {
            return gameBoard;
        }

        public void setGameBoard(String[][] gameBoard) {
            this.gameBoard = gameBoard;
        }

        public String[][] getTestGameBoard() {
            return testGameBoard;
        }

        public void setTestGameBoard(String[][] testGameBoard) {
            this.testGameBoard = testGameBoard;
        }

        public int[] getValidUserCoordinates() {
            return validUserCoordinates;
        }

        public void setValidUserCoordinates(int[] validUserCoordinates) {
            this.validUserCoordinates = validUserCoordinates;
        }

        public boolean isGameOver() {
            return isGameOver;
        }

        public void setGameOver(boolean gameOver) {
            isGameOver = gameOver;
        }

        public String[] getGamePieceChoices() {
            return gamePieceChoices;
        }

        public int getGamePieceCount() {
            return gamePieceCount;
        }

        public void setGamePieceCount(int gamePieceCount) {
            this.gamePieceCount = gamePieceCount;
        }

        public Player getCurrentPlayer() {
            return currentPlayer;
        }

        public void setCurrentPlayer(Player currentPlayer) {
            this.currentPlayer = currentPlayer;
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    public class Player {

        private String type;
        private String gamePiece;

        public Player(String gamePiece) {
            this.gamePiece = gamePiece;
        }

        // ***** GETTERS AND SETTERS *****

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getGamePiece() {
            return gamePiece;
        }

        public void setGamePiece(String gamePiece) {
            this.gamePiece = gamePiece;
        }
    }
  learner_created: true
- name: src/tictactoe/TicTacToeGame.java
  visible: true
  text: |
    package tictactoe;

    public class TicTacToeGame {

        public TicTacToeGame() {

            Menu menu = new Menu();
            String userCommand = menu.getUserCommand();

            while (!userCommand.equalsIgnoreCase("exit")) {

                Player player1 = menu.getPlayer1();
                Player player2 = menu.getPlayer2();
                final GameBoard gameBoard = new GameBoard(player1, player2);

                boolean currentPlayerIsHuman = gameBoard.getCurrentPlayer().getType().equalsIgnoreCase("user");

                while(!gameBoard.isGameOver()) {

                    if (currentPlayerIsHuman) {
                        gameBoard.getUserCoordinates();
                    } else {
                        gameBoard.getComputerCoordinates(); // level will be passed in as argument here
                    }

                    gameBoard.setGameOver(gameBoard.checkForWinner());
                    currentPlayerIsHuman = gameBoard.getCurrentPlayer().getType().equalsIgnoreCase("user");

                }

                menu = new Menu();
                userCommand = menu.getUserCommand();

            }

        }

    }
  learner_created: true
- name: src/tictactoe/Menu.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Scanner;

    public class Menu {

        private static final Scanner input = new Scanner(System.in);
        private String[] userInputArray;
        private final String[] userCommandChoices = {"start", "exit"};
        private final String[] userPlayerChoices = {"easy", ",medium", "hard", "user"};
        private String userCommand;
        private final Player player1 = new Player("X"); // game piece is always X
        private final Player player2 = new Player("O"); // game piece is always O

        public Menu() {
            getUserInput();
        }

        private void getUserInput() {

            System.out.print("Input command: ");
            setUserInputArray(input.nextLine().split(" "));

            boolean isExiting = getUserInputArray()[0].equalsIgnoreCase(getUserCommandChoices()[1]);

            while (!isValidInputArray() && !isExiting) {

                System.out.println("Bad parameters!");
                setUserInputArray(input.nextLine().split(" "));

                isExiting = getUserInputArray()[0].equalsIgnoreCase(getUserCommandChoices()[1]);

            }

            setUserCommand(getUserInputArray()[0]);

            if (!isExiting) {
                getPlayer1().setType(getUserInputArray()[1]);
                getPlayer2().setType(getUserInputArray()[2]);
            }

        }

        private boolean isValidInputArray() {

            // make sure length of input array is 3
            if (getUserInputArray().length != 3) {
                return false;
            }

            int validInputCount = 0;

            // make sure user command is correct
            for (String userCommand : getUserCommandChoices()) {
                if (getUserInputArray()[0].equalsIgnoreCase(userCommand)) {
                    validInputCount++;
                }
            }

            // make sure user player choice 1 is correct
            for (String userPlayerChoice: getUserPlayerChoices()) {
                if (getUserInputArray()[1].equals(userPlayerChoice)) {
                    validInputCount++;
                }
                if (getUserInputArray()[2].equals(userPlayerChoice)) {
                    validInputCount++;
                }
            }

            return validInputCount == 3;
        }

        // ***** GETTERS AND SETTERS *****


        public String[] getUserCommandChoices() {
            return userCommandChoices;
        }

        public String[] getUserPlayerChoices() {
            return userPlayerChoices;
        }

        public String[] getUserInputArray() {
            return userInputArray;
        }

        public void setUserInputArray(String[] userInputArray) {
            this.userInputArray = userInputArray;
        }

        public String getUserCommand() {
            return userCommand;
        }

        public void setUserCommand(String userCommand) {
            this.userCommand = userCommand;
        }

        public Player getPlayer1() {
            return player1;
        }

        public Player getPlayer2() {
            return player2;
        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7437#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 07 Aug 2022 19:47:51 UTC
record: 4
