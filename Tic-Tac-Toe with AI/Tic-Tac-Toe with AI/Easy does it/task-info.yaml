type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }



            if (!output.toLowerCase().replace("'", "\"") .contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/CellOccupiedException.java
  visible: true
  text: |
    package tictactoe;

    public class CellOccupiedException extends Exception {

        public CellOccupiedException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/tictactoe/GameBoard.java
  visible: true
  text: |
    package tictactoe;

    import java.util.InputMismatchException;
    import java.util.Scanner;

    public class GameBoard {
        private final static Scanner input = new Scanner(System.in);

        private boolean isGameOver = false;
        private String[][] gameBoard = new String[3][3];

        private String[][] testGameBoard = new String[3][3];
        private int[] validUserCoordinates = new int[2];
        private final String[] gamePieces = {GamePieces.X.getGamePiece(), GamePieces.O.getGamePiece()};
        private String currentGamePiece;
        private int gamePieceCount;

        public GameBoard() {

            System.out.println();

            getUserCells();

    //        while(!isGameOver) {
                chooseGamePiece();
                getUserCoordinates();
                printGameBoard();
                checkForWinner();

    //            setGameOver(checkForWinner());
    //        }
        }

        // ***** GAME BOARD *****

        public void printGameBoard() {

            // print top row
            String topBottomBorder = "---------";
            System.out.println(topBottomBorder);

            // print game board
            for (int i = 0; i < getGameBoard().length; i++) {
                // print left border character
                String leftRightBorderCharacter = "|";
                System.out.print(leftRightBorderCharacter + " ");
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    System.out.print(getGameBoard()[i][j] + " ");
                }
                // print right border character
                System.out.println(leftRightBorderCharacter);
            }

            // print bottom row
            System.out.println(topBottomBorder);

            // update number of game pieces on game board
            updateNumberOfPiecesOnBoard();

        }

        private String[][] cloneGameBoard() {

            String[][] newGameBoard = new String[3][3];

            for (int i = 0; i < getGameBoard().length; i++) {
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    newGameBoard[i][j] = getGameBoard()[i][j];
                }
            }

            return newGameBoard;
        }

        // ***** SWITCH GAME PIECE ON EVERY TURN *****

        private void chooseGamePiece() {

            // if there are an even number of game pieces already on the board, the game piece is "X", otherwise it's "O"

            if (getGamePieceCount() % 2 == 0) {
                setCurrentGamePiece(GamePieces.X.getGamePiece());
            } else {
                setCurrentGamePiece(GamePieces.O.getGamePiece());
            }

        }

        // keeps track of the number of pieces currently on the game board
        private void updateNumberOfPiecesOnBoard() {
            int gamePieceCount = 0;

            for (int i = 0; i < getGameBoard().length; i++) {
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    for (String gamePiece : getGamePieces()) {
                        if (getGameBoard()[i][j].equals(gamePiece)) {
                            gamePieceCount++;
                        }
                    }
                }
            }

            setGamePieceCount(gamePieceCount);
        }

        // ***** GET AND VALIDATE USER COORDINATES *****

        private void getUserCoordinates() {

            boolean isValid = false;

            while(!isValid) {

                System.out.print("Enter the coordinates: ");

                // validate user coordinates

                isValid = isValidInput();

            }

        }

        private boolean isValidInput() {

            int[] testCoordinates = new int[2];

            try {
                for (int i = 0; i < testCoordinates.length; i++) {
                    testCoordinates[i] = input.nextInt() - 1;
                }

                setValidUserCoordinates(testCoordinates);

                setTestGameBoard(checkForGamePieceInCoordinateLocation(getValidUserCoordinates()));

                String coordinate = getGameBoard()[getValidUserCoordinates()[0]][getValidUserCoordinates()[1]];

                if (coordinate.equals(getGamePieces()[0]) || coordinate.equals(getGamePieces()[1])) {
                    throw new CellOccupiedException("This cell is occupied! Choose another one!");
                } else {
                    setGameBoard(getTestGameBoard());
                    return true;
                }

            } catch (CellOccupiedException cellOccupiedException) {
                System.out.println(cellOccupiedException.getMessage());
            // check that coordinates are numbers
            } catch (InputMismatchException inputMismatchException) {
                System.out.println("You should enter numbers!");
                input.nextLine(); // consume input
            // check that coordinates are within correct range
            } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
                System.out.println("Coordinates should be from 1 to 3!");
            }
            return false;
        }

        private String[][] checkForGamePieceInCoordinateLocation(int[] validUserCoordinates) {

            setTestGameBoard(cloneGameBoard());

            getTestGameBoard()[validUserCoordinates[0]][validUserCoordinates[1]] = getCurrentGamePiece();

            return getTestGameBoard();

        }

        // ***** GET TEST USER CELLS AND ADD THEM TO GAME BOARD *****

        private void getUserCells() {

            System.out.print("Enter the cells: ");

            // get all cells and split them into an array
            String[] userCells = input.nextLine().split("");

            // add to the game board
            setGameBoard(translateUserInput(userCells));

            // print game board
            printGameBoard();
        }

        // translate the user input String into the test game board array
        private String[][] translateUserInput(String[] userInput) {

            // add user input to test game board

            int index = 0;
            for (int i = 0; i < getTestGameBoard().length; i++) {
                for (int j = 0; j < getTestGameBoard()[i].length; j++) {
                    // if one of the cells is "_" it should be printed as an empty space
                    if (userInput[index].equals("_")) {
                        getTestGameBoard()[i][j] = " ";
                    } else {
                        getTestGameBoard()[i][j] = userInput[index];
                    }
                    index++;
                }
            }

            return getTestGameBoard();
        }

        // ***** DEFINE WINS AND CHECK FOR WINNER *****
        private boolean checkForWinner() {

            boolean gameWon = false;
            String winner;

            for (String gamePieceCheck : getGamePieces()) {
                for (int i = 0; i < getGameBoard().length; i++) {

                    String gamePiece1 = "";
                    String gamePiece2 = "";
                    String gamePiece3 = "";

                    for (int j = 0; j < getGameBoard()[i].length; j++) {

                        // check for left to right diagonal winner
                        if (i == 0 && j == 0) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i + 1][j + 1];
                            gamePiece3 = getGameBoard()[i + 2][j + 2];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }

                        // check for right to left diagonal winner
                        if (i == 0 && j == 2) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i + 1][j - 1];
                            gamePiece3 = getGameBoard()[i + 2][j - 2];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }

                        // check for horizontal winner
                        if (j == 0) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i][j + 1];
                            gamePiece3 = getGameBoard()[i][j + 2];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }

                        // check for vertical winner
                        if (i == 0) {
                            gamePiece1 = getGameBoard()[i][j];
                            gamePiece2 = getGameBoard()[i + 1][j];
                            gamePiece3 = getGameBoard()[i + 2][j];

                            if (isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3)) {
                                break;
                            }
                        }
                    }

                    // break loop if game won
                    gameWon = isWinner(gamePieceCheck, gamePiece1, gamePiece2, gamePiece3);
                    if (gameWon) {
                        winner = gamePieceCheck;
                        System.out.println(winner + " wins");
                        return true;
                    }
                }
            }

            if (getGamePieceCount() == 9) {
                System.out.println("Draw");
                return true;
            } else {
                System.out.println("Game not finished");
                return false;
            }
        }

        private boolean isWinner(String gamePieceCheck, String gamePiece1, String gamePiece2, String gamePiece3) {

            return gamePieceCheck.equals(gamePiece1) && gamePieceCheck.equals(gamePiece2) && gamePieceCheck.equals(gamePiece3);

        }

        // ***** GETTERS AND SETTERS *****

        public String[][] getGameBoard() {
            return gameBoard;
        }

        public void setGameBoard(String[][] gameBoard) {
            this.gameBoard = gameBoard;
        }

        public String[][] getTestGameBoard() {
            return testGameBoard;
        }

        public void setTestGameBoard(String[][] testGameBoard) {
            this.testGameBoard = testGameBoard;
        }

        public int[] getValidUserCoordinates() {
            return validUserCoordinates;
        }

        public void setValidUserCoordinates(int[] validUserCoordinates) {
            this.validUserCoordinates = validUserCoordinates;
        }

        public boolean isGameOver() {
            return isGameOver;
        }

        public void setGameOver(boolean gameOver) {
            isGameOver = gameOver;
        }

        public String getCurrentGamePiece() {
            return currentGamePiece;
        }

        public void setCurrentGamePiece(String currentGamePiece) {
            this.currentGamePiece = currentGamePiece;
        }

        public String[] getGamePieces() {
            return gamePieces;
        }

        public int getGamePieceCount() {
            return gamePieceCount;
        }

        public void setGamePieceCount(int gamePieceCount) {
            this.gamePieceCount = gamePieceCount;
        }
    }
  learner_created: true
- name: src/tictactoe/TicTacToeGame.java
  visible: true
  text: |
    package tictactoe;

    public class TicTacToeGame {

        private final GameBoard gameBoard = new GameBoard();

    }
  learner_created: true
- name: src/tictactoe/GamePieces.java
  visible: true
  text: |
    package tictactoe;

    public enum GamePieces {
        X,
        O;

        String getGamePiece() {
            switch (this) {
                case X:
                    return "X";

                case O:
                    return "O";

                default:
                    throw new AssertionError("Unknown game piece entered " + this);
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Menu.java
  visible: true
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7435#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 04 Aug 2022 12:16:39 UTC
record: 2
